version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  observability:
    driver: "bridge"

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - observability

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "init:1:1,light:1:1,medium:1:1,heavy:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    networks:
      - observability

  translator:
    image: observability/translator
    expose:
      - "8085"
    ports:
      - "8085:8085"
    environment:
      SERVER_PORT: 8085
    networks:
      - observability

  initiator:
    image: observability/initiator
    expose:
      - "8091"
    ports:
      - "8091:8091"
    environment:
      kafka.client.id: initiator
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: nonUsed
      kafka.acks: ${KAFKA_ACKS}
    networks:
      - observability

  lightProcessor:
    image: observability/light
    expose:
      - "8082"
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      kafka.client.id: light
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: light
      kafka.acks: ${KAFKA_ACKS}
      translator.url: http://translator:8085/translate
      translator.target: ES
    depends_on:
      - "translator"
    networks:
      - observability

  mediumProcessor:
    image: observability/medium
    expose:
      - "8083"
    ports:
      - "8083:8083"
    environment:
      SERVER_PORT: 8083
      kafka.client.id: medium
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: medium
      kafka.acks: ${KAFKA_ACKS}
      translator.url: http://translator:8085/translate
      translator.target: IT
    depends_on:
      - "translator"
    networks:
      - observability

  heavyProcessor:
    image: observability/heavy
    expose:
      - "8084"
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      kafka.client.id: heavy
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: heavy
      kafka.acks: ${KAFKA_ACKS}
      translator.url: http://translator:8085/translate
      translator.target: DE
    depends_on:
      - "translator"
    networks:
      - observability

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    expose:
      - 9090
    volumes:
      - /Users/user/dev/gs-spring-boot/initial/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - observability

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - /Users/user/dev/gs-spring-boot/initial/docker/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - observability