version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}
  data01:
    driver: local

networks:
  observability:
    driver: "bridge"

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - observability

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "init:1:1,light:1:1,medium:1:1,heavy:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    networks:
      - observability

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elastic
    environment:
      - node.name=elastic
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elastic
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - ./docker/ELK/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - 9200:9200
    networks:
      - observability

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: http://elastic:9200
    depends_on:
      - elastic
    networks:
      - observability

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.6.2
    container_name: filebeat
    command: filebeat -e --strict.perms=false
    user: root
    volumes:
      - "./docker/ELK/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - elastic
    networks:
      - observability

  zipkin:
    image: openzipkin/zipkin
    environment:
      STORAGE_TYPE: mem
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - 9411:9411
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    expose:
      - 9090
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - observability

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - observability

  translator:
    image: observability/translator
    expose:
      - "8085"
    ports:
      - "8085:8085"
    environment:
      SERVER_PORT: 8085
    depends_on:
      - filebeat
      - zipkin
    networks:
      - observability

  initiator:
    image: observability/initiator
    expose:
      - "8091"
    ports:
      - "8091:8091"
    environment:
      kafka.client.id: initiator
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.zipkin.sender.type: ${KAFKA_PRODUCER_ZIPKIN_SENDER_TYPE}
      kafka.zipkin.http.endpoint: ${KAFKA_PRODUCER_ZIPKIN_HTTP_ENDPOINT}
      kafka.zipkin.local.service.name: initiator
      kafka.consumer.group.id: notUsed
      kafka.acks: ${KAFKA_ACKS}
    depends_on:
      - filebeat
      - zipkin
    networks:
      - observability

  spanishProcessor:
    image: observability/light
    expose:
      - "8082"
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      kafka.client.id: light
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: spanish
      kafka.acks: ${KAFKA_ACKS}
      zipkin.sender.http.url: ${KAFKA_PRODUCER_ZIPKIN_SENDER_TYPE}
      zipkin.service.name: SpanishProcessor
      translator.url: ${TRANSLATOR_URL}
      translator.target: ES
    depends_on:
      - translator
      - filebeat
      - zipkin
    networks:
      - observability

  italianProcessor:
    image: observability/medium
    expose:
      - "8083"
    ports:
      - "8083:8083"
    environment:
      SERVER_PORT: 8083
      kafka.client.id: medium
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: italian
      kafka.acks: ${KAFKA_ACKS}
      zipkin.sender.http.url: ${KAFKA_PRODUCER_ZIPKIN_SENDER_TYPE}
      zipkin.service.name: ItalianProcessor
      translator.url: ${TRANSLATOR_URL}
      translator.target: IT
    depends_on:
      - translator
      - filebeat
      - zipkin
    networks:
      - observability

  heavyProcessor:
    image: observability/heavy
    expose:
      - "8084"
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      kafka.client.id: heavy
      kafka.bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS}
      kafka.key.serializer: ${KAFKA_KEY_SERIALIZER}
      kafka.value.serializer: ${KAFKA_VALUE_SERIALIZER}
      kafka.key.deserializer: ${KAFKA_KEY_DESERIALIZER}
      kafka.value.deserializer: ${KAFKA_VALUE_DESERIALIZER}
      kafka.consumer.group.id: german
      kafka.acks: ${KAFKA_ACKS}
      zipkin.sender.http.url: ${KAFKA_PRODUCER_ZIPKIN_SENDER_TYPE}
      zipkin.service.name: GermanProcessor
      translator.url: ${TRANSLATOR_URL}
      translator.target: DE
    depends_on:
      - translator
      - filebeat
      - zipkin
    networks:
      - observability